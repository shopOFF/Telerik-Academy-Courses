namespace CatSystem
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    public class Owner
    {
        private string firstName;  // собственика ще си има първо име, (ПОЛЕТАТА ВИНАГИ СА PRIVATE !)
        private string lastName;   // собстеника ще си има и последно име, правим и двете с полета и пропъртита(енкапсурираме си ги)
                                   // ако не направим конструктор, той сам се прави по дефоут с дефоутни стоиности, но за тази програма това не ни устройва
        private List<Cat> cats;    // добавяме си към собственика,колекция от котки,с поле, МОНОГО ВАЖНО: ПРИ ПОДОБНИ РЕФЕРЕНТНИ ТИПОВЕ, КОЛЕКЦИИ И ТН, ТРЯБВА ЗАДЪЛЖИТЕЛНО ГИ ДА СИ ИНСТАНЦИРАМЕ В КОНСТРУКТОРА(ИНАЧЕ ЩЕ БЪДЕ NULL, АКО НЕ ГО НАПРАВИМ)!!!
        public Owner(string fName, string lName)    // сега си правим конструктор, той задава първоначална стойност, на всеки нов Owner,     
        {                                          // правим го Owner- винаги да има(да търси) първо и последно име
            this.firstName = fName;
            this.lastName = lName;                // пишем this. за да си посочим конкретната инстанция в класа
            this.Age = 0;           // слагаме си първоначална стойност на Аge в констр...и я правим на 0, защото всеки човек, като се  роди е на 0 години
            this.cats = new List<Cat>(); // ПО ТОЗИ НАЧИН СИ ИНСТАНЦИРАМЕ КОЛЕКЦИИТЕ В КОНСТРУКТОРА!!!
        }

        // пропъртитата ни изваждат(експоузват) информацията(полетата) към външният свят и валидират(ако е нужно)(това е тяхната цел), затова са public и
        // не дават директен достъп към полетата от външния свят, това е и енкапсулацията, като в тях можем да си пишем колкото си искаме валидация(но не и прекълено сложна логика)!!!
        public string LastName              // сега си правим пропъртита, като искаме от външният свят само да могат да се взимат първото и
        {                                    // последно име, но  да не могът да ги променят !!!     
            get { return this.lastName; }     // затова си пишем само get, ако искаме да задаваме и стоиност, пишем и set
        }

        public string FirstName
        {
            get { return this.firstName; }
        }


        public string FullName   // правим си пропърти което да ни взима пълното име на собственика
        {
            get
            {
                return string.Format("{0} {1}", this.firstName, this.lastName);  // по този начин и директно ще го изпринти като го викнем отвън или вътре в класа
            }
        }

         //Автоматични пропъртита си правим, когато не ни трябва валидация, на данните!!! В противен случай си правим и филд и пропърти за да си направим енкапсулация и валидация!!!
        public int Age { get; private set; }  // правим си автоматично пропърти(при него компилатора сам ни прави поле), 
                                              //get за да можем да си четем годините от външният свят
                                              // правим си private set, защото искаме годините да не могат да се променят от външният свят, но да можем ние да ги променяме от самият клас!

        public void IncreaseAge()        // правим си метод, с който да си увеличаваме годините от външният свят(затова е public, може и да не е ) 
                                         // ако не искаме да ни увеличатват годините от вън
        {
            this.Age++;                 // ето така си увеличаваме годините
        }

        public string AllCats     // правим си пропърти което ни показва, колко котки има даден собственик
        {
            get                    // само ще ни ги показва разбирасе
            {
                return string.Join(", ", this.cats.Select(c => c.Name));   // по този начин ще ни изреди всички създадени котки, разделени със запетайки и ми ги дай, като стринг
            }                          // .Select(c=>c.Name) казваме за всяка котка (c) ми дай нейното име(c.Name) , другият вариянт е с foreach да си изциклим всички имена на котки и дани ги върне, но така е по лесно!!!
        }

        public void AddCat(Cat cat, string name)  // правим си метод за добавяне на котки към собственика, на него трябва да му се добави нова котка и име 
        {                                       //на котката(като си вземе собственика котката ще си я кръсти по някакъв начин)
            if (this.cats.Contains(cat))        // ако в котките на текущият owner вече се съдържа тази котка, изпълни ексепшъна(защото не е адекватно да кажем(Имаш тая котка,ето ти я пак тя пак става твоя))!!!
            {
                throw new ArgumentException("This owner already owns this cat: " + cat.Name);  // правим си ексепшъна ето така + името на котката която вече е наша
            }

            cat.Name = name;           // кръщава си по някакъв начин
            cat.Owner = this;    // това означава, текущият Owner вече става owner(собственик) на котката !
            this.cats.Add(cat);         // добавя му се котката 
        }



    }
}
