namespace _03.ExtMethodsLambdaExprLinq
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    public class LambdaExpressions
    {
        // НАЙ- ЧЕСТОТО ИМ ПРИЛОЖЕНИЕ Е ПРИ ТЪРСЕНЕ В КОЛЕКЦИИ. КАКВО ТОЧНО ТЪРСИМ НЯКЪДЕ В НЯКАКВА КОЛЕКЦИЯ!!!ВИЖ ПРИМЕРИТЕ ОТ StartUpExamples!!!!
        // Ламбда изразите са съкратени методи. Ламбда израза създава делегат или експрешън дърво.
        // Ламбда изразите създават функции.
        // => означава отива в (goes to).ОТЛЯВАТА СТРАНА НА СТРЕЛКИЧКАТА СА ВСИЧКИ ПАРАМЕТРИ, КОЙТО ДАДЕНИЯТ МЕТОД
        // ПРИЕМА(X, Y , Z  И ТН.). ОТ ДЯСНАТА СТРАНА  Е ВСЪЩНОСТ, КАКВО ДА СЕ СЛУЧИ!!!

        //<приема-стринг, връща-инт>
        Func<string, int> func = x => 42; // това е ламбда израз(метод), който приема x и връща някаква стойност int 

        // ламбда израз с два параметъра: КОЯТО ИМА ТЯЛО, АКО ИМА ТЯЛО ТРЯБВА ДА ИМА RETURN
        Func<string, string, int> funcForTwo = (x, y) => // приема 2 стринг параметъра и връща инт
            {
                Console.WriteLine(x, y);
                return 42;
            };
        // ТОЕСТ ЛАМБДА ИЗРАЗА Е МЕТОД, КОЙТО Е НАПИСАН ДИРЕКТНО ВЪТРЕ В КОДА И СЕ ИЗПОЛЗВА НА ЕДНО ЕДИНСТВЕНО МЯСТО, НО 
        // ЗАПИСЪТ МУ Е ДОСТА СЪКРАТЕН. ИМАМЕ ВЪЗМОЖНОСТ ДА ИМАМЕ ТЯЛО И ДА НЯМАМЕ ТЯЛО.
        // ЕТО СЪЩИЯТ ИЗРАЗ КАТО ГОРНИЯТ НО БЕЗ ТЯЛО!!!
        Func<string, string, int> funcForTwo2 = (x, y) => 42;

        // пример: функция, която приема стринг и ни го парсва към инт:
        Func<string, int> otherFunc = x => int.Parse(x);
        //int initialresult = otherFunc("15"); // тук в този клас не може дасе изпълни затова е закоментирано изпълнява се ок в мейн метода


        //МНОГО ЛЕСНО СЕ ИЗПОЛЗВАТ, СЛЕД КАТО СИ СЪЗДАДЕМ КОЛКЦИЯТА(ЛИСТА), ПРАВИМ ВТОРА В КОЯТО ДА ПРИСВОИМ ИСКАНИТЕ ОТ НАС НОВИ, СТОЙНОСТИ
        // И С ИМЕТО НА ПЪРВАТА КОЛЕКЦИЯ. ТОЧКА И ВЕЧЕ НИ ИЗЛИЗАТ МЕТОДИТЕ КОЙТО МОЖЕМ ДА ИЗПОЛЗВАМЕ ОТ ЛИНКЮ, ТЕ СА МНОГО И СЛЕД ТОВА В
        // СКОБИТЕ СИ ПИШЕМ ЛАМБДА ИЗРАЗА (ПРЕДИКАТА) ЛОГИКАТА С КОЯТО ЩЕ ТЪРСИМ СОРТИРАМЕ И ТН... МН ГОТИНО И БЪРЗО СТАВА!!!!!!
        //Пример:
        //var numbersList = new List<int>() { 1, 2, 3, 4, 23, 35345, 45455, 3232, 26, 554, 13 };
        //var evenNumbers = numbersList.FindAll(x => (x % 2) == 0);  // и всякакви други подобни проверки, логики, алгоритми, валидации са възможни!!!
        //Console.WriteLine(string.Join(", ", evenNumbers)); // тук само си ги принтим със стринг джойн

        // Всеки лист има FindAll и RemoveAll, който са много полезни методи, ето един пример с тях в ламбда изрази има го в мейн метода и работи!!!

        //        var numbersList = new List<int>() { 1, 2, 3, 4, 23, 35345, 45455, 3232, 26, 554, 13 };
        //        var evenNumbers = numbersList.FindAll(x => (x % 2) == 0);  // и всякакви други подобни проверки, логики, алгоритми, валидации са възможни!!!
        //            Console.WriteLine(string.Join(", ", evenNumbers));

        //            // продължение на горния пример премахва всички числа по големи от 30
        //            numbersList.RemoveAll(x => x > 30);  // и всякакви други подобни проверки, логики,алгоритми, валидации са възможни!!!
        //            Console.WriteLine(string.Join(", ",numbersList ));



    }
    public class Pet
    {
        public string Name { get; set; }

        public int Age { get; set; }
    }
}
