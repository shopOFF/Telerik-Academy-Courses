namespace DocumentSystem
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    // Със запетайки си изброяваме класовете и интерфейсите, който наследqwame!!! МНОГО ВАЖНО ТУК, КАК НАСЛЕДЯВАМЕ КЛАС И ВСИЧКО ОТ НЕГО, ОСОБЕНО ВАЖНО, КАК НАСЛЕДЯВАМЕ ЗАДЪЛЖИТЕЛНИТЕ ПОЛЕТА ,КОСТРУКТОРИ И ТН...АКО ИМАМЕ ТАКИВА!
    public class TextDocument : Document, IDocument // наследяваме си IDocument(в момента пищи, че не са имплементирани свойствата на IDocument),
    {                                     //но тъй като вече сме го имплементирали в Document, няма смисъл да копираме съЩото и тук. И СЪЩО СЛЕД, КАТО НАСЛЕДЯВАМЕ КЛАС,КОЙТО ВЕЧЕ НАСЛЕДЯВА IDocument МОЖЕМ ДА МАХНЕМ НАСЛЕДЯВАНЕТО МУ ОТ ТУК, НО ПО-ДОБРЕ ДА СИ СЕДИ!!!
                                          // ЗАТОВА МУ КАЗВАМЕ ДА НАСЕЛДИ И ГЛАВНИЯ КЛАС Document И ВЕЧЕ ВСЕ ЕДНО СМЕ ПРЕПИСАЛИ ЦЯЛАТА ИНФОРМАЦИЯ ОТ Document ТУК!!!
                                          //!!! ТРЯБВА ДА СИ СЪЗДАДЕМ КОНСТРУКТОР, КОЙТО ДА ПРИЕМА ЗАДЪЛЖИТЕЛНИЯТ ПАРАМЕТЪР ИМЕ, ЗАЩОТО НАСЛЕДЯВАМЕ КЛАС, КОЙТО ИСКА ЗАДЪЛЖИТЕЛНО ЗАДАВАНЕ НА ТОЗИ ПАРАМЕТЪР!!!!!И НЯМА КАК ДА СЪЗДАДЕМ НОВ ОБЕКТ ОТ ТИП ДОКУМЕНТ, КАТО ЦЯЛО БЕЗ НЕГО!
                                          // АКО ИМАМЕ И ДРУГИ КЛАСОВЕ, КОЙТО НАСЛЕДЯВАТ БАЗОВИЯ ИЛИ ТОЗИ КЛАС И ЗА ТЯХ ТРЯБВА ДА ИМА ПОДОБЕН КОНСТРУКТОР!!! 
        public TextDocument(string name, string charset)   // правим си конструктора ето така, КАТО СИ ВЗИМАМЕ ОТ БАЗОВИЯ КЛАС ИМЕТО, и си добавяме и за чарсет в конструктора(ако имаме повече от 1 задължителни стойности от базовия костр. , по същия начин ги дефинираме горе(string edi si kakvo) и после доло в base() разделени със запетайки)
            : base(name)        // ЕТО ТАКА МУ ПОДАВАМЕ ОТ БАЗОВИЯ КОНТРУКТОР С две точки, ДУМИЧКАТA base и в скоби(стойността от базовия конструктор,която искаме, може да се повече от една стойнсот, всички ги бутаме в скобите при name, с запетайки ги разделяме)  : base(name)
        {
            this.Charset = charset;
        }

        public TextDocument(string name, string content, string charset)    // за всеки случай ще си вземем и contenta от базовия контруктор, just in case не е задължително, просто ако ни потрябва
            : base(name, content)                                               // понеже content е опционална стойност  го слагаме в отделен конструктор
        {
            this.Charset = charset;
        }
        public string Charset { get; private set; }
    }
}
